#!/usr/bin/env bash
set -euo pipefail

# agent-worktree: Git worktree management tool with automatic setup and validation
#
# DESCRIPTION:
#   This tool simplifies git worktree management by:
#   - Creating new worktrees with automatic branch creation
#   - Validating repository state before operations (checks for uncommitted changes)
#   - Copying important untracked files (.env, .envrc, etc.) to new worktrees
#   - Running setup scripts automatically in new worktrees
#   - Optionally starting a new shell or development tool in the worktree (--bash, --claude, --gemini)
#
# USAGE:
#   agent-worktree [OPTIONS] add <branch-name>     Create a new worktree with the given branch
#   agent-worktree [OPTIONS] remove <branch-name>  Remove an existing worktree
#   agent-worktree -h, --help                      Show this help message
#
# OPTIONS:
#   --dry-run        Preview what would happen without making changes
#   --bash           Start a new bash shell in the worktree directory after creation
#   --claude         Start 'claude --dangerously-skip-permissions' in the worktree directory
#   --gemini         Start 'gemini --yolo' in the worktree directory
#
# EXAMPLES:
#   agent-worktree add feat/new-feature            Create worktree and stay in current directory
#   agent-worktree --bash add feat/new-feature     Create worktree and start new shell in it
#   agent-worktree --claude add feat/new-fix       Create worktree and start claude in it
#   agent-worktree --gemini add feat/new-fix       Create worktree and start gemini in it
#   agent-worktree --dry-run add feat/test         Preview worktree creation without doing it
#   agent-worktree remove feat/old-feature         Remove worktree and optionally delete branch
#
# NOTES:
#   - Branch names are automatically validated for git compatibility
#   - Worktrees are created in the parent directory of the main repository
#   - Forward slashes in branch names are converted to hyphens for directory names
#   - The tool ensures your local branch is in sync with remote before operations
#   - Untracked config files (.env, .envrc, etc.) are automatically copied to new worktrees
#   - If a setup.sh script exists, it will be run automatically in the new worktree
#
# AUTOCOMPLETE:
#   To enable bash completion, add to your .bashrc/.bash_profile:
#     source /path/to/agent-worktree
#   
#   The completion provides intelligent suggestions for:
#   - Commands (add, remove)
#   - Options (--dry-run, --bash, --claude, --gemini, etc.)
#   - Branch names (context-aware based on command)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
BLUE='\033[0;34m'

# Global flags
DRY_RUN=false
RUN_BASH=false
RUN_CLAUDE=false
RUN_GEMINI=false

error() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

warning() {
    echo -e "${YELLOW}Warning: $1${NC}" >&2
}

success() {
    echo -e "${GREEN}Success: $1${NC}"
}

info() {
    echo -e "$1"
}

# Show help message
show_help() {
    # Extract help from the header comments
    sed -n '4,/^$/p' "$0" | sed 's/^# //; s/^#$//'
    exit 0
}

dry_run_info() {
    if [[ "$DRY_RUN" == "true" ]]; then
        echo -e "${BLUE}[DRY RUN] Would execute: $1${NC}"
    fi
}

# Validate we're in a git repository
validate_git_repo() {
    git rev-parse --git-dir > /dev/null 2>&1 || error "Not in a git repository"
}

# Check for uncommitted changes
check_uncommitted_changes() {
    git diff --quiet && git diff --cached --quiet
}

# Check if local branch is up to date with remote
check_remote_sync() {
    git fetch --quiet origin
    
    local current_branch=$(get_current_branch)
    local upstream="origin/$current_branch"
    
    # Check if upstream exists
    if ! git rev-parse --verify "$upstream" > /dev/null 2>&1; then
        warning "No upstream branch found for $current_branch"
        return 0
    fi
    
    local local_commit=$(git rev-parse HEAD)
    local remote_commit=$(git rev-parse "$upstream")
    
    if [[ "$local_commit" != "$remote_commit" ]]; then
        local behind=$(git rev-list --count HEAD.."$upstream")
        local ahead=$(git rev-list --count "$upstream"..HEAD)
        
        if [[ "$behind" -gt 0 ]]; then
            error "Local branch is $behind commits behind remote. Please pull first."
        fi
        
        if [[ "$ahead" -gt 0 ]]; then
            warning "Local branch is $ahead commits ahead of remote."
        fi
    fi
}

# Get workspace root directory
get_workspace_root() {
    dirname "$(git rev-parse --show-toplevel)"
}

# Get current branch name
get_current_branch() {
    git rev-parse --abbrev-ref HEAD 2>/dev/null
}

# Get branches that have worktrees
get_worktree_branches() {
    git worktree list --porcelain | grep "^branch" | cut -d' ' -f2 | sed 's|refs/heads/||' | grep -v "^$"
}

# Get all branches (local and remote)
get_all_branches() {
    git branch -a | sed 's/^[* ]*//' | sed 's|remotes/origin/||' | grep -v "HEAD" | sort -u
}

# Get branches available for new worktrees (excludes current branch and existing worktrees)
get_available_branches_for_worktree() {
    local current_branch=$(get_current_branch)
    local worktree_branches=$(get_worktree_branches)
    local all_branches=$(get_all_branches)
    
    local available_branches=""
    for branch in $all_branches; do
        if [[ "$branch" != "$current_branch" ]] && ! echo "$worktree_branches" | grep -q "^$branch$"; then
            available_branches="$available_branches $branch"
        fi
    done
    
    echo "$available_branches"
}

# Validate branch name
validate_branch_name() {
    local branch="$1"
    
    [[ -z "$branch" ]] && error "Branch name cannot be empty"
    
    # Check for invalid characters
    git check-ref-format "refs/heads/$branch" 2>/dev/null || error "Invalid branch name: $branch"
}

# Copy important untracked files to new worktree
copy_untracked_files() {
    local source_dir="$1"
    local dest_dir="$2"
    
    # List of files to copy if they exist
    local -a files_to_copy=(
        ".envrc"
        ".env"
        ".env.local"
        "secrets.json"
        "config.local.json"
    )
    
    for file in "${files_to_copy[@]}"; do
        if [[ -f "$source_dir/$file" ]]; then
            cp "$source_dir/$file" "$dest_dir/$file"
            info "Copied $file to new worktree"
        fi
    done
}

# Add a new worktree
add_worktree() {
    local branch="$1"
    validate_branch_name "$branch"
    
    # Check current repository state
    if ! check_uncommitted_changes; then
        error "You have uncommitted changes. Please commit or stash them first."
    fi
    
    check_remote_sync
    
    # Determine worktree path
    local workspace_root
    workspace_root=$(get_workspace_root)
    local repo_name
    repo_name=$(basename "$(git rev-parse --show-toplevel)")
    local worktree_name="${branch//\//-}"  # Replace / with - in branch name
    local worktree_path="$workspace_root/$worktree_name"
    
    # Check if worktree already exists
    [[ -d "$worktree_path" ]] && error "Directory already exists: $worktree_path"
    
    # Check if branch already exists
    git show-ref --quiet "refs/heads/$branch" && error "Branch already exists: $branch"
    
    # Create the worktree
    info "Creating worktree at: $worktree_path"
    info "Creating branch: $branch"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        dry_run_info "git worktree add '$worktree_path' -b '$branch'"
    else
        git worktree add "$worktree_path" -b "$branch" || error "Failed to create worktree"
    fi
    
    # Copy untracked files
    if [[ "$DRY_RUN" == "false" ]]; then
        copy_untracked_files "$(pwd)" "$worktree_path"
    else
        dry_run_info "Copy untracked files (.envrc, .env, .env.local, secrets.json, config.local.json)"
    fi
    
    # Run setup scripts if they exist
    if [[ "$DRY_RUN" == "true" ]]; then
        [[ -f "setup.sh" ]] && dry_run_info "Run setup.sh in new worktree"
    else
        if [[ -f "$worktree_path/setup.sh" ]]; then
            info "Running setup.sh in new worktree..."
            (cd "$worktree_path" && bash setup.sh)
        fi
    fi
    
    success "Worktree created successfully!"
    
    # Handle directory change and tool execution
    if [[ "$RUN_BASH" == "true" || "$RUN_CLAUDE" == "true" || "$RUN_GEMINI" == "true" ]]; then
        if [[ "$DRY_RUN" == "true" ]]; then
            if [[ "$RUN_CLAUDE" == "true" ]]; then
                dry_run_info "cd '$worktree_path' && exec claude --dangerously-skip-permissions"
            elif [[ "$RUN_GEMINI" == "true" ]]; then
                dry_run_info "cd '$worktree_path' && exec gemini --yolo"
            else
                dry_run_info "cd '$worktree_path' && exec $SHELL"
            fi
        else
            # Change to the worktree directory and start appropriate tool or shell
            cd "$worktree_path"
            
            if [[ "$RUN_CLAUDE" == "true" ]]; then
                info "Starting Claude in $worktree_path..."
                exec claude --dangerously-skip-permissions
            elif [[ "$RUN_GEMINI" == "true" ]]; then
                info "Starting Gemini in $worktree_path..."
                exec gemini --yolo
            else
                info "Starting new shell in $worktree_path..."
                exec "$SHELL"
            fi
        fi
    else
        info "To switch to the new worktree: cd $worktree_path"
    fi
}

# Remove a worktree
remove_worktree() {
    local branch="$1"
    validate_branch_name "$branch"
    
    # Find the worktree path
    local worktree_info
    worktree_info=$(git worktree list --porcelain | grep -B2 "branch refs/heads/$branch" || true)
    
    [[ -z "$worktree_info" ]] && error "No worktree found for branch: $branch"
    
    local worktree_path
    worktree_path=$(echo "$worktree_info" | grep "^worktree" | cut -d' ' -f2)
    
    [[ -z "$worktree_path" ]] && error "Could not determine worktree path for branch: $branch"
    
    # Check for uncommitted changes in the worktree
    if [[ -d "$worktree_path" ]]; then
        pushd "$worktree_path" > /dev/null
        if ! check_uncommitted_changes; then
            popd > /dev/null
            error "Worktree has uncommitted changes: $worktree_path"
        fi
        popd > /dev/null
    fi
    
    # Remove the worktree
    info "Removing worktree at: $worktree_path"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        dry_run_info "git worktree remove '$branch' --force"
    else
        git worktree remove "$branch" --force || error "Failed to remove worktree"
    fi
    
    # Ask if user wants to delete the branch
    if [[ "$DRY_RUN" == "true" ]]; then
        dry_run_info "Prompt to delete branch '$branch'"
    else
        read -p "Do you want to delete the branch '$branch' as well? (y/N) " -n 1 -r
        echo
        if [[ "$REPLY" =~ ^[Yy]$ ]]; then
            if git branch -d "$branch" 2>/dev/null; then
                success "Branch deleted successfully"
            else
                warning "Could not delete branch (may have unmerged changes). Use 'git branch -D $branch' to force delete."
            fi
        fi
    fi
    
    success "Worktree removed successfully!"
}

# Main command handling
main() {
    # Parse command line arguments
    local command=""
    local branch=""
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --bash)
                RUN_BASH=true
                shift
                ;;
            --claude)
                RUN_CLAUDE=true
                shift
                ;;
            --gemini)
                RUN_GEMINI=true
                shift
                ;;
            -h|--help)
                show_help
                ;;
            add|remove)
                command="$1"
                shift
                if [[ $# -gt 0 ]]; then
                    branch="$1"
                    shift
                fi
                ;;
            *)
                if [[ -z "$command" ]]; then
                    error "Unknown option or command: $1\nRun 'agent-worktree --help' for usage information"
                elif [[ -z "$branch" ]]; then
                    branch="$1"
                    shift
                else
                    error "Unexpected argument: $1\nRun 'agent-worktree --help' for usage information"
                fi
                ;;
        esac
    done
    
    # Validate that we have a command and branch
    if [[ -z "$command" ]]; then
        error "No command specified\nRun 'agent-worktree --help' for usage information"
    fi
    
    if [[ -z "$branch" ]]; then
        error "No branch name specified\nRun 'agent-worktree --help' for usage information"
    fi
    
    # Validate flag combinations
    if [[ "$command" != "add" && ( "$RUN_BASH" == "true" || "$RUN_CLAUDE" == "true" || "$RUN_GEMINI" == "true" ) ]]; then
        error "The --bash, --claude, and --gemini flags can only be used with the 'add' command"
    fi
    
    # Check for mutually exclusive flags
    local tool_count=0
    [[ "$RUN_BASH" == "true" ]] && ((tool_count++))
    [[ "$RUN_CLAUDE" == "true" ]] && ((tool_count++))
    [[ "$RUN_GEMINI" == "true" ]] && ((tool_count++))
    
    if [[ $tool_count -gt 1 ]]; then
        error "Only one of --bash, --claude, or --gemini can be specified at a time"
    fi
    
    validate_git_repo
    
    case "$command" in
        add)
            add_worktree "$branch"
            ;;
        remove)
            remove_worktree "$branch"
            ;;
        *)
            error "Unknown command: $command. Use 'add' or 'remove'"
            ;;
    esac
}

# Bash completion function (only activated when sourced)
_agent_worktree_complete() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    # Top-level options and commands
    local commands="add remove"
    local options="--dry-run --bash --claude --gemini -h --help"
    
    # Check if we're completing a command or option
    case "${prev}" in
        agent-worktree)
            # First argument - show commands and options
            COMPREPLY=( $(compgen -W "${commands} ${options}" -- ${cur}) )
            return 0
            ;;
        add)
            # After 'add' command - suggest branch names based on existing branches
            # but filter out current branch and branches that already have worktrees
            if command -v git &> /dev/null && git rev-parse --git-dir &> /dev/null; then
                local available_branches=$(get_available_branches_for_worktree)
                COMPREPLY=( $(compgen -W "${available_branches}" -- ${cur}) )
            fi
            return 0
            ;;
        remove)
            # After 'remove' command - suggest branches that have worktrees
            if command -v git &> /dev/null && git rev-parse --git-dir &> /dev/null; then
                local worktree_branches=$(get_worktree_branches)
                COMPREPLY=( $(compgen -W "${worktree_branches}" -- ${cur}) )
            fi
            return 0
            ;;
        --dry-run|--bash|--claude|--gemini)
            # After flags, suggest commands if not already present
            local has_command=false
            for word in "${COMP_WORDS[@]}"; do
                if [[ "$word" == "add" || "$word" == "remove" ]]; then
                    has_command=true
                    break
                fi
            done
            
            if [[ "$has_command" == "false" ]]; then
                COMPREPLY=( $(compgen -W "${commands}" -- ${cur}) )
            fi
            return 0
            ;;
        *)
            # Check if we have a command already
            local has_command=""
            for word in "${COMP_WORDS[@]}"; do
                if [[ "$word" == "add" || "$word" == "remove" ]]; then
                    has_command="$word"
                    break
                fi
            done
            
            if [[ -n "$has_command" ]]; then
                # We have a command, check if we need to complete branch name
                local branch_arg_index=$((COMP_CWORD))
                for i in $(seq 1 $((COMP_CWORD-1))); do
                    if [[ "${COMP_WORDS[$i]}" == "$has_command" ]]; then
                        branch_arg_index=$((i+1))
                        break
                    fi
                done
                
                if [[ $COMP_CWORD -eq $branch_arg_index ]]; then
                    # Complete branch name
                    case "$has_command" in
                        add)
                            # Suggest branches for add
                            if command -v git &> /dev/null && git rev-parse --git-dir &> /dev/null; then
                                local available_branches=$(get_available_branches_for_worktree)
                                COMPREPLY=( $(compgen -W "${available_branches}" -- ${cur}) )
                            fi
                            ;;
                        remove)
                            # Suggest branches for remove
                            if command -v git &> /dev/null && git rev-parse --git-dir &> /dev/null; then
                                local worktree_branches=$(get_worktree_branches)
                                COMPREPLY=( $(compgen -W "${worktree_branches}" -- ${cur}) )
                            fi
                            ;;
                    esac
                fi
            else
                # No command yet, suggest commands and unused options
                local used_options=""
                for word in "${COMP_WORDS[@]:1}"; do
                    if [[ "$word" == -* ]]; then
                        used_options="$used_options $word"
                    fi
                done
                
                local available_options=""
                for opt in $options; do
                    if ! echo "$used_options" | grep -q "$opt"; then
                        available_options="$available_options $opt"
                    fi
                done
                
                COMPREPLY=( $(compgen -W "${commands} ${available_options}" -- ${cur}) )
            fi
            return 0
            ;;
    esac
}

# Register completion only if script is being sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    complete -F _agent_worktree_complete agent-worktree
else
    # Script is being executed, run main
    main "$@"
fi